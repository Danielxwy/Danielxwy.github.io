[{"title":"你好，世界！","date":"2018-05-06T09:03:12.000Z","url":"/posts/hello-world/","tags":[["欢迎","/tags/%E6%AC%A2%E8%BF%8E/"]],"categories":[["全新体验","/categories/%E5%85%A8%E6%96%B0%E4%BD%93%E9%AA%8C/"]],"content":"欢迎使用 Kratos : Rebirth 这个我们精心打造的 Hexo 主题！希望能在接下来的旅途中与您相伴，共同创造出更多难以忘怀的美好体验。"},{"date":"2024-11-15T15:39:07.957Z","url":"/addons/leave-event.js","categories":[["undefined",""]],"content":"(() => { // 配置部分 const leaveDelay = 0.1; // 触发事件的延迟，单位为秒 const leaveFavicon = null; // 触发事件后的图标路径，设置为 null 表示不替换图标 const leaveTitle = \"{{{(>_"},{"date":"2024-11-15T17:05:31.260Z","url":"/addons/cursor-effects.js","categories":[["undefined",""]],"content":"class Circle { constructor({ origin, speed, color, angle, context }) { this.origin = origin this.position = { ...this.origin } this.color = color this.speed = speed this.angle = angle this.context = context this.renderCount = 0 } draw() { this.context.fillStyle = this.color this.context.beginPath() this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2) this.context.fill() } move() { this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3) this.renderCount++ } } class Boom { constructor ({ origin, context, circleCount = 10, area }) { this.origin = origin this.context = context this.circleCount = circleCount this.area = area this.stop = false this.circles = [] } randomArray(range) { const length = range.length const randomIndex = Math.floor(length * Math.random()) return range[randomIndex] } randomColor() { const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) } randomRange(start, end) { return (end - start) * Math.random() + start } init() { for(let i = 0; i < this.circleCount; i++) { const circle = new Circle({ context: this.context, origin: this.origin, color: this.randomColor(), angle: this.randomRange(Math.PI - 1, Math.PI + 1), speed: this.randomRange(1, 6) }) this.circles.push(circle) } } move() { this.circles.forEach((circle, index) => { if (circle.position.x > this.area.width || circle.position.y > this.area.height) { return this.circles.splice(index, 1) } circle.move() }) if (this.circles.length == 0) { this.stop = true } } draw() { this.circles.forEach(circle => circle.draw()) } } class CursorSpecialEffects { constructor() { this.computerCanvas = document.createElement('canvas') this.renderCanvas = document.createElement('canvas') this.computerContext = this.computerCanvas.getContext('2d') this.renderContext = this.renderCanvas.getContext('2d') this.globalWidth = window.innerWidth this.globalHeight = window.innerHeight this.booms = [] this.running = false } handleMouseDown(e) { const boom = new Boom({ origin: { x: e.clientX, y: e.clientY }, context: this.computerContext, area: { width: this.globalWidth, height: this.globalHeight } }) boom.init() this.booms.push(boom) this.running || this.run() } handlePageHide() { this.booms = [] this.running = false } init() { const style = this.renderCanvas.style style.position = 'fixed' style.top = style.left = 0 style.zIndex = '999999999999999999999999999999999999999999' style.pointerEvents = 'none' style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight document.body.append(this.renderCanvas) window.addEventListener('mousedown', this.handleMouseDown.bind(this)) window.addEventListener('pagehide', this.handlePageHide.bind(this)) } run() { this.running = true if (this.booms.length == 0) { return this.running = false } requestAnimationFrame(this.run.bind(this)) this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.booms.forEach((boom, index) => { if (boom.stop) { return this.booms.splice(index, 1) } boom.move() boom.draw() }) this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight) } } const cursorSpecialEffects = new CursorSpecialEffects() cursorSpecialEffects.init()"},{"date":"2024-11-15T16:57:22.795Z","url":"/addons/snow.css","categories":[["undefined",""]],"content":"#snow { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 99999; pointer-events: none; background: rgba(225, 225, 225, .05); }"},{"date":"2024-11-16T14:04:34.901Z","url":"/addons/snow.js","categories":[["undefined",""]],"content":"(()=>{ // 设置雪花参数 const snowConf = { flakeCount: 100, minDist: 100, color: \"255, 255, 255\", size: 1.6, speed: 0.2, opacity: 0.3, stepsize: .1, fadeInSpeed: 0.02,// 越大越快 fadeOutSpeed: 0.02 }; // 记录下雪状态 let isSnowing = true; document.addEventListener(\"OnSnowStateChange\", (event) => { const lastState = isSnowing; //重新开始 if (!lastState && event.detail.enable === \"true\") { isSnowing = true; startSnow(); fadeInCanvas(); } else if (lastState && event.detail.enable === \"false\") { fadeOutCanvas(); } }); const requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function(callback){window.setTimeout(callback, 1000/60);}; window.requestAnimationFrame = requestAnimationFrame; const canvas = document.getElementById(\"snow\"); const ctx = canvas.getContext(\"2d\"); const flakeCount = snowConf.flakeCount; let mX = -100, mY = -100; let flakes = []; canvas.width = window.innerWidth; canvas.height = window.innerHeight; let fadeOutOpacity = 1.0; const fadeOutCanvas = () => { if (fadeOutOpacity > 0) { ctx.globalAlpha = fadeOutOpacity; fadeOutOpacity -= snowConf.fadeOutSpeed; // 调整步长以控制缓动速度 requestAnimationFrame(fadeOutCanvas); } else { isSnowing = false; // 清空画布 ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.globalAlpha = 1.0; fadeOutOpacity = 1.0; // 重置 } }; let fadeInOpacity = 0; const fadeInCanvas = () => { if (fadeInOpacity < 1) { ctx.globalAlpha = fadeInOpacity; fadeInOpacity += snowConf.fadeInSpeed; // 调整步长以控制缓动速度 requestAnimationFrame(fadeInCanvas); } else { ctx.globalAlpha = 1.0; fadeInOpacity = 0; // 重置 } }; const snow = () => { if (!isSnowing) { return; // 结束 } // 清空画布 ctx.clearRect(0, 0, canvas.width, canvas.height); const minDist = snowConf.minDist; for (let i = 0; i < flakeCount; i++){ let flake = flakes[i]; const x = mX, y = mY; const x2 = flake.x, y2 = flake.y; const dist = Math.sqrt((x - x2)*(x - x2) + (y - y2)*(y - y2)); if (dist < minDist) { const force = minDist / (dist*dist); const xcomp = (x - x2) / dist; const ycomp = (y - y2) / dist; const deltaV = force / 2; flake.velX -= deltaV * xcomp; flake.velY -= deltaV * ycomp; } else { flake.velX *= 0.98; if (flake.velY < flake.speed && (flake.speed - flake.velY > .01)) { flake.velY += (flake.speed - flake.velY) * .01; } flake.velX += Math.cos(flake.step += .05) * flake.stepSize; } ctx.fillStyle = \"rgba(\" + snowConf.color + \", \" + flake.opacity + \")\"; flake.y += flake.velY; flake.x += flake.velX; if(flake.y >= canvas.height || flake.y = canvas.width || flake.x { flake.x = Math.floor(Math.random()*canvas.width); flake.y = 0; flake.size = (Math.random()*3)+2; flake.speed = (Math.random()*1)+0.5; flake.velY = flake.speed; flake.velX = 0; flake.opacity = (Math.random()*0.5)+0.3; }; const startSnow = () => { // 生成初始雪花 for (let i = 0; i < flakeCount; i++) { const x = Math.floor(Math.random()*canvas.width); const y = Math.floor(Math.random()*canvas.height); const size = (Math.random()*3) + snowConf.size; const speed = (Math.random()*1) + snowConf.speed; const opacity = (Math.random()*0.5) + snowConf.opacity; flakes.push({ speed: speed, velX: 0, velY: speed, x: x, y: y, size: size, stepSize: (Math.random()) / 30 * snowConf.stepsize, step: 0, angle: 180, opacity: opacity }); } // 开始下雪 snow(); }; // 雪花避让鼠标 document.addEventListener(\"mousemove\", (e)=>{mX = e.clientX, mY = e.clientY}); // 窗口大小调整 window.addEventListener(\"resize\",()=>{canvas.width = window.innerWidth; canvas.height = window.innerHeight;}); // 初始化 startSnow(); })();"}]